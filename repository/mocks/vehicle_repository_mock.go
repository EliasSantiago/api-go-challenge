// Code generated by MockGen. DO NOT EDIT.
// Source: repository/vehicle_repository.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	model "github.com/EliasSantiago/api-go-challenge/model"
	gomock "github.com/golang/mock/gomock"
)

// MockVehicleRepository is a mock of VehicleRepository interface.
type MockVehicleRepository struct {
	ctrl     *gomock.Controller
	recorder *MockVehicleRepositoryMockRecorder
}

// MockVehicleRepositoryMockRecorder is the mock recorder for MockVehicleRepository.
type MockVehicleRepositoryMockRecorder struct {
	mock *MockVehicleRepository
}

// NewMockVehicleRepository creates a new mock instance.
func NewMockVehicleRepository(ctrl *gomock.Controller) *MockVehicleRepository {
	mock := &MockVehicleRepository{ctrl: ctrl}
	mock.recorder = &MockVehicleRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVehicleRepository) EXPECT() *MockVehicleRepositoryMockRecorder {
	return m.recorder
}

// AssignDriver mocks base method.
func (m *MockVehicleRepository) AssignDriver(request model.VehicleAssignDriverRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssignDriver", request)
	ret0, _ := ret[0].(error)
	return ret0
}

// AssignDriver indicates an expected call of AssignDriver.
func (mr *MockVehicleRepositoryMockRecorder) AssignDriver(request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssignDriver", reflect.TypeOf((*MockVehicleRepository)(nil).AssignDriver), request)
}

// CreateVehicle mocks base method.
func (m *MockVehicleRepository) CreateVehicle(vehicle model.Vehicle) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateVehicle", vehicle)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateVehicle indicates an expected call of CreateVehicle.
func (mr *MockVehicleRepositoryMockRecorder) CreateVehicle(vehicle interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateVehicle", reflect.TypeOf((*MockVehicleRepository)(nil).CreateVehicle), vehicle)
}

// DeleteVehicle mocks base method.
func (m *MockVehicleRepository) DeleteVehicle(id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteVehicle", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteVehicle indicates an expected call of DeleteVehicle.
func (mr *MockVehicleRepositoryMockRecorder) DeleteVehicle(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteVehicle", reflect.TypeOf((*MockVehicleRepository)(nil).DeleteVehicle), id)
}

// GetVehicleByID mocks base method.
func (m *MockVehicleRepository) GetVehicleByID(id int64) (*model.Vehicle, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVehicleByID", id)
	ret0, _ := ret[0].(*model.Vehicle)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVehicleByID indicates an expected call of GetVehicleByID.
func (mr *MockVehicleRepositoryMockRecorder) GetVehicleByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVehicleByID", reflect.TypeOf((*MockVehicleRepository)(nil).GetVehicleByID), id)
}

// GetVehicles mocks base method.
func (m *MockVehicleRepository) GetVehicles() ([]model.Vehicle, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVehicles")
	ret0, _ := ret[0].([]model.Vehicle)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVehicles indicates an expected call of GetVehicles.
func (mr *MockVehicleRepositoryMockRecorder) GetVehicles() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVehicles", reflect.TypeOf((*MockVehicleRepository)(nil).GetVehicles))
}

// UpdateVehicle mocks base method.
func (m *MockVehicleRepository) UpdateVehicle(vehicle model.Vehicle) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateVehicle", vehicle)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateVehicle indicates an expected call of UpdateVehicle.
func (mr *MockVehicleRepositoryMockRecorder) UpdateVehicle(vehicle interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateVehicle", reflect.TypeOf((*MockVehicleRepository)(nil).UpdateVehicle), vehicle)
}
