// Code generated by MockGen. DO NOT EDIT.
// Source: repository/driver_repository.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	model "github.com/EliasSantiago/api-go-challenge/model"
	gomock "github.com/golang/mock/gomock"
)

// MockDriverRepository is a mock of DriverRepository interface.
type MockDriverRepository struct {
	ctrl     *gomock.Controller
	recorder *MockDriverRepositoryMockRecorder
}

// MockDriverRepositoryMockRecorder is the mock recorder for MockDriverRepository.
type MockDriverRepositoryMockRecorder struct {
	mock *MockDriverRepository
}

// NewMockDriverRepository creates a new mock instance.
func NewMockDriverRepository(ctrl *gomock.Controller) *MockDriverRepository {
	mock := &MockDriverRepository{ctrl: ctrl}
	mock.recorder = &MockDriverRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDriverRepository) EXPECT() *MockDriverRepositoryMockRecorder {
	return m.recorder
}

// CreateDriver mocks base method.
func (m *MockDriverRepository) CreateDriver(driver model.Driver) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDriver", driver)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDriver indicates an expected call of CreateDriver.
func (mr *MockDriverRepositoryMockRecorder) CreateDriver(driver interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDriver", reflect.TypeOf((*MockDriverRepository)(nil).CreateDriver), driver)
}

// DeleteDriver mocks base method.
func (m *MockDriverRepository) DeleteDriver(id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDriver", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteDriver indicates an expected call of DeleteDriver.
func (mr *MockDriverRepositoryMockRecorder) DeleteDriver(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDriver", reflect.TypeOf((*MockDriverRepository)(nil).DeleteDriver), id)
}

// GetDriverByID mocks base method.
func (m *MockDriverRepository) GetDriverByID(id int64) (*model.Driver, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDriverByID", id)
	ret0, _ := ret[0].(*model.Driver)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDriverByID indicates an expected call of GetDriverByID.
func (mr *MockDriverRepositoryMockRecorder) GetDriverByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDriverByID", reflect.TypeOf((*MockDriverRepository)(nil).GetDriverByID), id)
}

// GetDrivers mocks base method.
func (m *MockDriverRepository) GetDrivers() ([]model.Driver, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDrivers")
	ret0, _ := ret[0].([]model.Driver)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDrivers indicates an expected call of GetDrivers.
func (mr *MockDriverRepositoryMockRecorder) GetDrivers() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDrivers", reflect.TypeOf((*MockDriverRepository)(nil).GetDrivers))
}

// UpdateDriver mocks base method.
func (m *MockDriverRepository) UpdateDriver(driver model.Driver) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDriver", driver)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateDriver indicates an expected call of UpdateDriver.
func (mr *MockDriverRepositoryMockRecorder) UpdateDriver(driver interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDriver", reflect.TypeOf((*MockDriverRepository)(nil).UpdateDriver), driver)
}
